/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.jsonschema2pojo") version "1.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("com.google.code.gson:gson:2.11.0")
    implementation("com.amazonaws:aws-lambda-java-core:1.2.2")
    implementation("com.amazonaws:aws-lambda-java-events:3.11.1")
    runtimeOnly("com.amazonaws:aws-lambda-java-log4j2:1.5.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2")
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "io.confluent.example.aws.lambda.auditlog.LambdaConfluentAuditLogToCloudWatch"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks {
    val zipTask by register("createZip", Zip::class) {
        from(processResources)
        from(compileJava)
        archiveFileName.set("app.zip")
        into("lib") {
            from(configurations.runtimeClasspath)
        }
    }

    build {
        dependsOn(zipTask)
    }
}

jsonSchema2Pojo {
  targetPackage = "io.confluent.examples.auditlog"
  setSource(files("src/main/json"))
  targetDirectory = file(layout.buildDirectory.dir("generated-sources/jsonschema2pojo"))
  setAnnotationStyle("jackson2")
  formatTypeMapping = hashMapOf(
    "uuid" to "java.lang.String"
  )
}
